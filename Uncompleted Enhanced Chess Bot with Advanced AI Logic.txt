import pyautogui
import time
import cv2
import numpy as np
import os
import subprocess
import threading
from collections import defaultdict
import math

class AdvancedChessBot:
    def __init__(self):
        # Timer coordinates for turn detection
        self.TIMER_X, self.TIMER_Y = 635, 620
        
        # Board capture coordinates
        self.board_x1, self.board_y1 = 561, 262
        self.board_x2, self.board_y2 = 805, 506
        
        # Known colors for turn detection
        self.WHITE_TURN_RGB = (255, 255, 255)
        self.GREY_TURN_RGB = (135, 135, 135)
        
        # Paths
        self.base_path = r'C:\Users\rahul\Desktop\New folder'
        self.board_path = os.path.join(self.base_path, 'board.png')
        self.stockfish_path = 'stockfish.exe'
        
        # Player color (will be detected automatically)
        self.player_color = None
        
        # Advanced piece values with positional bonuses
        self.piece_values = {
            'p': 100, 'P': 100,    # Pawn
            'n': 320, 'N': 320,    # Knight
            'b': 330, 'B': 330,    # Bishop
            'r': 500, 'R': 500,    # Rook
            'q': 900, 'Q': 900,    # Queen
            'k': 20000, 'K': 20000 # King
        }
        
        # Game phase tracking
        self.opening_moves = []
        self.move_count = 0
        self.game_phase = "opening"  # opening, middlegame, endgame
        
        # Position history for repetition detection
        self.position_history = []
        
        # Tactical patterns and threats
        self.threat_patterns = []
        
        # Time management
        self.time_per_move = 5.0  # seconds to think per move
        
        # Advanced evaluation weights
        self.eval_weights = {
            'material': 1.0,
            'position': 0.3,
            'mobility': 0.1,
            'king_safety': 0.5,
            'pawn_structure': 0.2,
            'tactics': 0.8,
            'endgame_tables': 0.4
        }
        
        # Piece-square tables for positional evaluation
        self.piece_square_tables = self._init_piece_square_tables()
        
        # Square to coordinate mapping
        self.square_to_coord = {
            'a1': (575, 490), 'a2': (575, 460), 'a3': (575, 430), 'a4': (575, 400),
            'a5': (575, 370), 'a6': (575, 338), 'a7': (575, 307), 'a8': (575, 275),
            'b1': (605, 490), 'b2': (605, 460), 'b3': (605, 430), 'b4': (605, 400),
            'b5': (605, 370), 'b6': (605, 338), 'b7': (605, 307), 'b8': (605, 275),
            'c1': (635, 490), 'c2': (635, 460), 'c3': (635, 430), 'c4': (635, 400),
            'c5': (635, 370), 'c6': (635, 338), 'c7': (635, 307), 'c8': (635, 275),
            'd1': (666, 490), 'd2': (666, 460), 'd3': (666, 430), 'd4': (666, 400),
            'd5': (666, 370), 'd6': (666, 338), 'd7': (666, 307), 'd8': (666, 275),
            'e1': (697, 490), 'e2': (697, 460), 'e3': (697, 430), 'e4': (697, 400),
            'e5': (697, 370), 'e6': (697, 338), 'e7': (697, 307), 'e8': (697, 275),
            'f1': (727, 490), 'f2': (727, 460), 'f3': (727, 430), 'f4': (727, 400),
            'f5': (727, 370), 'f6': (727, 338), 'f7': (727, 307), 'f8': (727, 275),
            'g1': (757, 490), 'g2': (757, 460), 'g3': (757, 430), 'g4': (757, 400),
            'g5': (757, 370), 'g6': (757, 338), 'g7': (757, 307), 'g8': (757, 275),
            'h1': (789, 490), 'h2': (789, 460), 'h3': (789, 430), 'h4': (789, 400),
            'h5': (789, 370), 'h6': (789, 338), 'h7': (789, 307), 'h8': (789, 275),
        }
        
        # Load templates
        self.load_templates()
    
    def _init_piece_square_tables(self):
        """Initialize piece-square tables for positional evaluation"""
        # Pawn table (values from white's perspective)
        pawn_table = [
            [0,  0,  0,  0,  0,  0,  0,  0],
            [50, 50, 50, 50, 50, 50, 50, 50],
            [10, 10, 20, 30, 30, 20, 10, 10],
            [5,  5, 10, 25, 25, 10,  5,  5],
            [0,  0,  0, 20, 20,  0,  0,  0],
            [5, -5,-10,  0,  0,-10, -5,  5],
            [5, 10, 10,-20,-20, 10, 10,  5],
            [0,  0,  0,  0,  0,  0,  0,  0]
        ]
        
        # Knight table
        knight_table = [
            [-50,-40,-30,-30,-30,-30,-40,-50],
            [-40,-20,  0,  0,  0,  0,-20,-40],
            [-30,  0, 10, 15, 15, 10,  0,-30],
            [-30,  5, 15, 20, 20, 15,  5,-30],
            [-30,  0, 15, 20, 20, 15,  0,-30],
            [-30,  5, 10, 15, 15, 10,  5,-30],
            [-40,-20,  0,  5,  5,  0,-20,-40],
            [-50,-40,-30,-30,-30,-30,-40,-50]
        ]
        
        # Bishop table
        bishop_table = [
            [-20,-10,-10,-10,-10,-10,-10,-20],
            [-10,  0,  0,  0,  0,  0,  0,-10],
            [-10,  0,  5, 10, 10,  5,  0,-10],
            [-10,  5,  5, 10, 10,  5,  5,-10],
            [-10,  0, 10, 10, 10, 10,  0,-10],
            [-10, 10, 10, 10, 10, 10, 10,-10],
            [-10,  5,  0,  0,  0,  0,  5,-10],
            [-20,-10,-10,-10,-10,-10,-10,-20]
        ]
        
        # Rook table
        rook_table = [
            [0,  0,  0,  0,  0,  0,  0,  0],
            [5, 10, 10, 10, 10, 10, 10,  5],
            [-5,  0,  0,  0,  0,  0,  0, -5],
            [-5,  0,  0,  0,  0,  0,  0, -5],
            [-5,  0,  0,  0,  0,  0,  0, -5],
            [-5,  0,  0,  0,  0,  0,  0, -5],
            [-5,  0,  0,  0,  0,  0,  0, -5],
            [0,  0,  0,  5,  5,  0,  0,  0]
        ]
        
        # Queen table
        queen_table = [
            [-20,-10,-10, -5, -5,-10,-10,-20],
            [-10,  0,  0,  0,  0,  0,  0,-10],
            [-10,  0,  5,  5,  5,  5,  0,-10],
            [-5,  0,  5,  5,  5,  5,  0, -5],
            [0,  0,  5,  5,  5,  5,  0, -5],
            [-10,  5,  5,  5,  5,  5,  0,-10],
            [-10,  0,  5,  0,  0,  0,  0,-10],
            [-20,-10,-10, -5, -5,-10,-10,-20]
        ]
        
        # King middle game table
        king_mg_table = [
            [-30,-40,-40,-50,-50,-40,-40,-30],
            [-30,-40,-40,-50,-50,-40,-40,-30],
            [-30,-40,-40,-50,-50,-40,-40,-30],
            [-30,-40,-40,-50,-50,-40,-40,-30],
            [-20,-30,-30,-40,-40,-30,-30,-20],
            [-10,-20,-20,-20,-20,-20,-20,-10],
            [20, 20,  0,  0,  0,  0, 20, 20],
            [20, 30, 10,  0,  0, 10, 30, 20]
        ]
        
        # King endgame table
        king_eg_table = [
            [-50,-40,-30,-20,-20,-30,-40,-50],
            [-30,-20,-10,  0,  0,-10,-20,-30],
            [-30,-10, 20, 30, 30, 20,-10,-30],
            [-30,-10, 30, 40, 40, 30,-10,-30],
            [-30,-10, 30, 40, 40, 30,-10,-30],
            [-30,-10, 20, 30, 30, 20,-10,-30],
            [-30,-30,  0,  0,  0,  0,-30,-30],
            [-50,-30,-30,-30,-30,-30,-30,-50]
        ]
        
        return {
            'p': pawn_table, 'n': knight_table, 'b': bishop_table,
            'r': rook_table, 'q': queen_table, 'k_mg': king_mg_table,
            'k_eg': king_eg_table
        }
    
    def is_similar_color(self, rgb1, rgb2, tolerance=20):
        """Check if two RGB colors are similar within tolerance"""
        return all(abs(a - b) <= tolerance for a, b in zip(rgb1, rgb2))
    
    def detect_turn(self):
        """Detect whose turn it is based on timer color"""
        pixel_color = pyautogui.screenshot().getpixel((self.TIMER_X, self.TIMER_Y))
        
        if self.is_similar_color(pixel_color, self.WHITE_TURN_RGB):
            return "your"
        elif self.is_similar_color(pixel_color, self.GREY_TURN_RGB):
            return "opponent"
        else:
            return "unknown"
    
    def detect_player_color(self):
        """Detect if player is playing as White or Black by checking piece positions"""
        if not self.capture_board():
            return None
            
        try:
            board = cv2.imread(self.board_path)
            if board is None:
                return None
                
            board_gray = cv2.cvtColor(board, cv2.COLOR_BGR2GRAY)
            height, width = board_gray.shape
            cell_h, cell_w = height // 8, width // 8
            
            # Check bottom-left corner (should be a1 for White, h8 for Black)
            bottom_left_cell = board_gray[7*cell_h:8*cell_h, 0:cell_w]
            
            # Check for white rook template
            if 'wr_w' in self.templates and self.templates['wr_w'] is not None:
                res = cv2.matchTemplate(bottom_left_cell, self.templates['wr_w'], cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(res)
                if max_val > 0.6:
                    print("🟢 Detected: Playing as WHITE")
                    return 'white'
            
            if 'wr_b' in self.templates and self.templates['wr_b'] is not None:
                res = cv2.matchTemplate(bottom_left_cell, self.templates['wr_b'], cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(res)
                if max_val > 0.6:
                    print("🟢 Detected: Playing as WHITE")
                    return 'white'
            
            # Check for black rook template
            if 'br_w' in self.templates and self.templates['br_w'] is not None:
                res = cv2.matchTemplate(bottom_left_cell, self.templates['br_w'], cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(res)
                if max_val > 0.6:
                    print("🔴 Detected: Playing as BLACK")
                    return 'black'
                    
            if 'br_b' in self.templates and self.templates['br_b'] is not None:
                res = cv2.matchTemplate(bottom_left_cell, self.templates['br_b'], cv2.TM_CCOEFF_NORMED)
                _, max_val, _, _ = cv2.minMaxLoc(res)
                if max_val > 0.6:
                    print("🔴 Detected: Playing as BLACK")
                    return 'black'
            
            # Fallback: check for any white pieces in bottom two rows
            white_pieces_bottom = 0
            black_pieces_bottom = 0
            
            for row in range(6, 8):  # Bottom 2 rows
                for col in range(8):
                    y1, y2 = row * cell_h, (row + 1) * cell_h
                    x1, x2 = col * cell_w, (col + 1) * cell_w
                    cell = board_gray[y1:y2, x1:x2]
                    
                    for name, template in self.templates.items():
                        if template is None:
                            continue
                        res = cv2.matchTemplate(cell, template, cv2.TM_CCOEFF_NORMED)
                        _, max_val, _, _ = cv2.minMaxLoc(res)
                        
                        if max_val > 0.6:
                            if name.startswith('w'):  # White piece
                                white_pieces_bottom += 1
                            elif name.startswith('b'):  # Black piece
                                black_pieces_bottom += 1
            
            if white_pieces_bottom > black_pieces_bottom:
                print("🟢 Detected: Playing as WHITE (based on piece distribution)")
                return 'white'
            elif black_pieces_bottom > white_pieces_bottom:
                print("🔴 Detected: Playing as BLACK (based on piece distribution)")
                return 'black'
            
            print("⚠️ Could not detect player color, defaulting to WHITE")
            return 'white'
            
        except Exception as e:
            print(f"❌ Error detecting player color: {e}")
            return 'white'  # Default to white
    
    def capture_board(self):
        """Capture the chess board and save as image"""
        try:
            width = self.board_x2 - self.board_x1
            height = self.board_y2 - self.board_y1
            screenshot = pyautogui.screenshot(region=(self.board_x1, self.board_y1, width, height))
            screenshot.save(self.board_path)
            print("✅ Board screenshot captured successfully")
            return True
        except Exception as e:
            print(f"❌ Error capturing board: {e}")
            return False
    
    def load_templates(self):
        """Load all piece templates"""
        self.templates = {}
        template_names = [
            'wp_w', 'wp_b', 'bp_w', 'bp_b', 'wr_w', 'wr_b', 'br_w', 'br_b',
            'wn_w', 'wn_b', 'bn_w', 'bn_b', 'wb_w', 'wb_b', 'bb_w', 'bb_b',
            'wq_w', 'wq_b', 'bq_w', 'bq_b', 'wk_w', 'wk_b', 'bk_w', 'bk_b'
        ]
        
        for name in template_names:
            template_path = os.path.join(self.base_path, f'{name}.png')
            if os.path.exists(template_path):
                self.templates[name] = cv2.imread(template_path, cv2.IMREAD_GRAYSCALE)
            else:
                print(f"⚠️ Template {name}.png not found")
                self.templates[name] = None
    
    def generate_fen(self):
        """Generate FEN string from board image"""
        try:
            # Load board image
            board = cv2.imread(self.board_path)
            if board is None:
                print("❌ Could not load board image")
                return None
                
            board_gray = cv2.cvtColor(board, cv2.COLOR_BGR2GRAY)
            height, width = board_gray.shape
            cell_h, cell_w = height // 8, width // 8
            
            threshold = 0.65
            matched_positions = []
            
            # Board mapping depends on player color
            if self.player_color == 'white':
                # White at bottom: top-left is a8, bottom-right is h1
                files = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h']
                ranks = ['8', '7', '6', '5', '4', '3', '2', '1']
            else:
                # Black at bottom: top-left is h1, bottom-right is a8
                files = ['h', 'g', 'f', 'e', 'd', 'c', 'b', 'a']
                ranks = ['1', '2', '3', '4', '5', '6', '7', '8']
            
            for row in range(8):
                for col in range(8):
                    y1, y2 = row * cell_h, (row + 1) * cell_h
                    x1, x2 = col * cell_w, (col + 1) * cell_w
                    cell = board_gray[y1:y2, x1:x2]
                    best_match = None
                    best_score = 0
                    
                    for name, template in self.templates.items():
                        if template is None:
                            continue
                        res = cv2.matchTemplate(cell, template, cv2.TM_CCOEFF_NORMED)
                        _, max_val, _, _ = cv2.minMaxLoc(res)
                        
                        if max_val > best_score and max_val >= threshold:
                            best_score = max_val
                            best_match = name
                    
                    if best_match:
                        color = best_match[0]  # w or b
                        piece = best_match[1]  # p, r, n, b, q, k
                        file = files[col]
                        rank = ranks[row]
                        pos_str = f"{color}{piece}{file}{rank}"
                        matched_positions.append(pos_str)
            
            # Generate FEN from positions
            fen = self.positions_to_fen(matched_positions)
            print(f"✅ Generated FEN: {fen}")
            return fen
            
        except Exception as e:
            print(f"❌ Error generating FEN: {e}")
            return None
    
    def positions_to_fen(self, positions):
        """Convert piece positions to FEN string"""
        board = [['' for _ in range(8)] for _ in range(8)]
        piece_map = {'p': 'p', 'r': 'r', 'n': 'n', 'b': 'b', 'q': 'q', 'k': 'k'}
        
        for item in positions:
            if len(item) >= 4:
                color, piece, file, rank = item[0], item[1], item[2], item[3]
                row = 8 - int(rank)
                col = ord(file) - ord('a')
                symbol = piece_map[piece].upper() if color == 'w' else piece_map[piece]
                board[row][col] = symbol
        
        fen_rows = []
        for row in board:
            fen_row = ''
            empty = 0
            for cell in row:
                if cell == '':
                    empty += 1
                else:
                    if empty:
                        fen_row += str(empty)
                        empty = 0
                    fen_row += cell
            if empty:
                fen_row += str(empty)
            fen_rows.append(fen_row)
        
        # Set the active color based on player color and turn
        active_color = 'w' if self.player_color == 'white' else 'b'
        
        return '/'.join(fen_rows) + f' {active_color} - - 0 1'

    def get_multiple_best_moves(self, fen, depth=22, num_moves=5):
        """Get multiple best moves from Stockfish with advanced settings"""
        try:
            process = subprocess.Popen(
                [self.stockfish_path],
                stdin=subprocess.PIPE,
                stdout=subprocess.PIPE,
                stderr=subprocess.PIPE,
                universal_newlines=True,
                bufsize=1
            )
            
            # Advanced Stockfish configuration
            commands = [
                'setoption name Hash value 256',  # Increase hash table
                'setoption name Threads value 4',  # Use multiple threads
                f'setoption name MultiPV value {num_moves}',
                'setoption name Contempt value 24',  # Slight aggression
                'setoption name Minimum Thinking Time value 1000',
                f'position fen {fen}',
                f'go depth {depth}'
            ]
            
            for command in commands:
                process.stdin.write(command + '\n')
            process.stdin.flush()
            
            moves_with_eval = []
            
            while True:
                output = process.stdout.readline()
                if not output:
                    break
                    
                # Parse PV lines for moves and evaluations
                if 'info depth' in output and 'pv' in output and f'depth {depth}' in output:
                    parts = output.split()
                    try:
                        # Find evaluation
                        eval_score = 0
                        if 'cp' in parts:
                            cp_index = parts.index('cp')
                            if cp_index + 1 < len(parts):
                                eval_score = int(parts[cp_index + 1])
                        elif 'mate' in parts:
                            mate_index = parts.index('mate')
                            if mate_index + 1 < len(parts):
                                mate_in = int(parts[mate_index + 1])
                                eval_score = 30000 if mate_in > 0 else -30000
                        
                        # Find the move (first move in PV)
                        if 'pv' in parts:
                            pv_index = parts.index('pv')
                            if pv_index + 1 < len(parts):
                                move = parts[pv_index + 1]
                                # Get full principal variation for deeper analysis
                                pv_line = parts[pv_index + 1:]
                                moves_with_eval.append((move, eval_score, pv_line))
                    except (ValueError, IndexError):
                        continue
                        
                if 'bestmove' in output:
                    break
            
            process.stdin.write('quit\n')
            process.stdin.flush()
            process.terminate()
            
            # Sort by evaluation (best first)
            moves_with_eval.sort(key=lambda x: x[1], reverse=True)
            
            print(f"✅ Stockfish found {len(moves_with_eval)} candidate moves:")
            for i, (move, eval_score, pv) in enumerate(moves_with_eval):
                pv_str = ' '.join(pv[:5])  # Show first 5 moves of PV
                print(f"   {i+1}. {move} (eval: {eval_score/100:.2f}) PV: {pv_str}")
            
            return moves_with_eval
            
        except Exception as e:
            print(f"❌ Error getting moves from Stockfish: {e}")
            return []

    def parse_fen_to_board(self, fen):
        """Convert FEN string to board representation"""
        board = [['' for _ in range(8)] for _ in range(8)]
        fen_board = fen.split(' ')[0]
        rows = fen_board.split('/')
        
        for row_idx, row in enumerate(rows):
            col_idx = 0
            for char in row:
                if char.isdigit():
                    col_idx += int(char)
                else:
                    board[row_idx][col_idx] = char
                    col_idx += 1
        
        return board

    def evaluate_position_advanced(self, fen):
        """Advanced position evaluation considering multiple factors"""
        try:
            board = self.parse_fen_to_board(fen)
            our_color = 'white' if self.player_color == 'white' else 'black'
            
            total_score = 0
            
            # 1. Material evaluation with piece-square tables
            material_score = self.evaluate_material_and_position(board, our_color)
            total_score += material_score * self.eval_weights['material']
            
            # 2. King safety evaluation
            king_safety_score = self.evaluate_king_safety(board, our_color)
            total_score += king_safety_score * self.eval_weights['king_safety']
            
            # 3. Pawn structure evaluation
            pawn_score = self.evaluate_pawn_structure(board, our_color)
            total_score += pawn_score * self.eval_weights['pawn_structure']
            
            # 4. Mobility and control evaluation
            mobility_score = self.evaluate_mobility(board, our_color)
            total_score += mobility_score * self.eval_weights['mobility']
            
            # 5. Tactical threats evaluation
            tactical_score = self.evaluate_tactical_threats(board, our_color)
            total_score += tactical_score * self.eval_weights['tactics']
            
            return total_score
            
        except Exception as e:
            print(f"❌ Error in advanced position evaluation: {e}")
            return 0

    def evaluate_material_and_position(self, board, our_color):
        """Evaluate material balance with positional bonuses"""
        score = 0
        piece_count = defaultdict(int)
        
        for row in range(8):
            for col in range(8):
                piece = board[row][col]
                if not piece:
                    continue
                
                piece_color = 'white' if piece.isupper() else 'black'
                piece_type = piece.lower()
                piece_count[piece_type] += 1
                
                # Material value
                material_value = self.piece_values.get(piece_type, 0)
                
                # Positional bonus from piece-square tables
                positional_bonus = 0
                if piece_type in self.piece_square_tables:
                    if piece_type == 'k':
                        # Use different king tables based on game phase
                        if self.is_endgame(board):
                            table = self.piece_square_tables['k_eg']
                        else:
                            table = self.piece_square_tables['k_mg']
                    else:
                        table = self.piece_square_tables[piece_type]
                    
                    # Flip table for black pieces
                    if piece_color == 'black':
                        positional_bonus = table[7-row][col]
                    else:
                        positional_bonus = table[row][col]
                
                total_piece_value = material_value + positional_bonus
                
                if piece_color == our_color:
                    score += total_piece_value
                else:
                    score -= total_piece_value
        
        # Bishop pair bonus
        if our_color == 'white':
            if piece_count['B'] >= 2:
                score += 50  # Bishop pair bonus
        else:
            if piece_count['b'] >= 2:
                score += 50
        
        return score

    def is_endgame(self, board):
        """Determine if we're in endgame phase"""
        queens = sum(1 for row in board for piece in row if piece.lower() == 'q')
        major_pieces = sum(1 for row in board for piece in row if piece.lower() in ['q', 'r'])
        
        return queens == 0 or major_pieces <= 4

    def evaluate_king_safety(self, board, our_color):
        """Evaluate king safety - crucial for avoiding tactics"""
        score = 0
        
        # Find kings
        our_king_pos = None
        enemy_king_pos = None
